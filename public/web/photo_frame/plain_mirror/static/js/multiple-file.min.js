/* Copyright (c) 2010 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.0.4
 *
 * Requires: 1.2.2+
 */
(function (d) {
    function g(a) {
        var b = a || window.event, i = [].slice.call(arguments, 1), c = 0, h = 0, e = 0;
        a = d.event.fix(b);
        a.type = "mousewheel";
        if (a.wheelDelta) c = a.wheelDelta / 120;
        if (a.detail) c = -a.detail / 3;
        e = c;
        if (b.axis !== undefined && b.axis === b.HORIZONTAL_AXIS) {
            e = 0;
            h = -1 * c
        }
        if (b.wheelDeltaY !== undefined) e = b.wheelDeltaY / 120;
        if (b.wheelDeltaX !== undefined) h = -1 * b.wheelDeltaX / 120;
        i.unshift(a, c, h, e);
        return d.event.handle.apply(this, i)
    }

    var f = ["DOMMouseScroll", "mousewheel"];
    d.event.special.mousewheel = {
        setup: function () {
            if (this.addEventListener)for (var a = f.length; a;)this.addEventListener(f[--a], g, false); else this.onmousewheel = g
        }, teardown: function () {
            if (this.removeEventListener)for (var a = f.length; a;)this.removeEventListener(f[--a], g, false); else this.onmousewheel = null
        }
    };
    d.fn.extend({
        mousewheel: function (a) {
            return a ? this.bind("mousewheel", a) : this.trigger("mousewheel")
        }, unmousewheel: function (a) {
            return this.unbind("mousewheel", a)
        }
    })
})(jQuery);
;;(function (a) {
    var m, t, u, f, D, j, E, n, z, A, q = 0, e = {}, o = [], p = 0, c = {}, l = [], G = null, v = new Image,
        J = /\.(jpg|gif|png|bmp|jpeg)(.*)?$/i, W = /[^\.]\.(swf)\s*$/i, K, L = 1, y = 0, s = "", r, i, h = false,
        B = a.extend(a("<div/>")[0], {prop: 0}), M = a.browser.msie && a.browser.version < 7 && !window.XMLHttpRequest,
        N = function () {
            t.hide();
            v.onerror = v.onload = null;
            G && G.abort();
            m.empty()
        }, O = function () {
            if (false === e.onError(o, q, e)) {
                t.hide();
                h = false
            } else {
                e.titleShow = false;
                e.width = "auto";
                e.height = "auto";
                m.html('<p id="fancybox-error">The requested content cannot be loaded.<br />Please try again later.</p>');
                F()
            }
        }, I = function () {
            var b = o[q], d, g, k, C, P, w;
            N();
            e = a.extend({}, a.fn.fancybox.defaults, typeof a(b).data("fancybox") == "undefined" ? e : a(b).data("fancybox"));
            w = e.onStart(o, q, e);
            if (w === false) h = false; else {
                if (typeof w == "object") e = a.extend(e, w);
                k = e.title || (b.nodeName ? a(b).attr("title") : b.title) || "";
                if (b.nodeName && !e.orig) e.orig = a(b).children("img:first").length ? a(b).children("img:first") : a(b);
                if (k === "" && e.orig && e.titleFromAlt) k = e.orig.attr("alt");
                d = e.href || (b.nodeName ? a(b).attr("href") : b.href) || null;
                if (/^(?:javascript)/i.test(d) || d == "#") d = null;
                if (e.type) {
                    g = e.type;
                    if (!d) d = e.content
                } else if (e.content) g = "html"; else if (d) g = d.match(J) ? "image" : d.match(W) ? "swf" : a(b).hasClass("iframe") ? "iframe" : d.indexOf("#") === 0 ? "inline" : "ajax";
                if (g) {
                    if (g == "inline") {
                        b = d.substr(d.indexOf("#"));
                        g = a(b).length > 0 ? "inline" : "ajax"
                    }
                    e.type = g;
                    e.href = d;
                    e.title = k;
                    if (e.autoDimensions && e.type !== "iframe" && e.type !== "swf") {
                        e.width = "auto";
                        e.height = "auto"
                    }
                    if (e.modal) {
                        e.overlayShow = true;
                        e.hideOnOverlayClick = false;
                        e.hideOnContentClick = false;
                        e.enableEscapeButton = false;
                        e.showCloseButton = false
                    }
                    e.padding = parseInt(e.padding, 10);
                    e.margin = parseInt(e.margin, 10);
                    m.css("padding", e.padding + e.margin);
                    a(".fancybox-inline-tmp").unbind("fancybox-cancel").bind("fancybox-change", function () {
                        a(this).replaceWith(j.children())
                    });
                    switch (g) {
                        case"html":
                            m.html(e.content);
                            F();
                            break;
                        case"inline":
                            if (a(b).parent().is("#fancybox-content") === true) {
                                h = false;
                                break
                            }
                            a('<div class="fancybox-inline-tmp" />').hide().insertBefore(a(b)).bind("fancybox-cleanup", function () {
                                a(this).replaceWith(j.children())
                            }).bind("fancybox-cancel", function () {
                                a(this).replaceWith(m.children())
                            });
                            a(b).appendTo(m);
                            F();
                            break;
                        case"image":
                            h = false;
                            a.fancybox.showActivity();
                            v = new Image;
                            v.onerror = function () {
                                O()
                            };
                            v.onload = function () {
                                h = true;
                                v.onerror = v.onload = null;
                                e.width = v.width;
                                e.height = v.height;
                                a("<img />").attr({id: "fancybox-img", src: v.src, alt: e.title}).appendTo(m);
                                Q()
                            };
                            v.src = d;
                            break;
                        case"swf":
                            e.scrolling = "no";
                            e.autoDimensions = false;
                            C = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="' + e.width + '" height="' + e.height + '"><param name="movie" value="' +
                                d + '"></param>';
                            P = "";
                            a.each(e.swf, function (x, H) {
                                C += '<param name="' + x + '" value="' + H + '"></param>';
                                P += " " + x + '="' + H + '"'
                            });
                            C += '<embed src="' + d + '" type="application/x-shockwave-flash" width="' + e.width + '" height="' + e.height + '"' + P + "></embed></object>";
                            m.html(C);
                            F();
                            break;
                        case"ajax":
                            h = false;
                            a.fancybox.showActivity();
                            e.ajax.win = e.ajax.success;
                            G = a.ajax(a.extend({}, e.ajax, {
                                url: d, data: e.ajax.data || {}, error: function (x) {
                                    x.status > 0 && O()
                                }, success: function (x, H, R) {
                                    if ((typeof R == "object" ? R : G).status == 200) {
                                        if (typeof e.ajax.win == "function") {
                                            w = e.ajax.win(d, x, H, R);
                                            if (w === false) {
                                                t.hide();
                                                return
                                            } else if (typeof w == "string" || typeof w == "object") x = w
                                        }
                                        m.html(x);
                                        F()
                                    }
                                }
                            }));
                            break;
                        case"iframe":
                            e.autoDimensions = false;
                            Q()
                    }
                } else O()
            }
        }, F = function () {
            m.wrapInner('<div style="width:' + (e.width == "auto" ? "auto" : e.width + "px") + ";height:" + (e.height == "auto" ? "auto" : e.height + "px") + ";overflow: " + (e.scrolling == "auto" ? "auto" : e.scrolling == "yes" ? "scroll" : "hidden") + '"></div>');
            e.width = m.width();
            e.height = m.height();
            Q()
        }, Q = function () {
            var b, d;
            t.hide();
            if (f.is(":visible") && false === c.onCleanup(l, p, c)) {
                a.event.trigger("fancybox-cancel");
                h = false
            } else {
                h = true;
                a(j.add(u)).unbind();
                a(window).unbind("resize.fb scroll.fb");
                a(document).unbind("keydown.fb");
                f.is(":visible") && c.titlePosition !== "outside" && f.css("height", f.height());
                l = o;
                p = q;
                c = e;
                if (c.overlayShow) {
                    u.css({
                        "background-color": c.overlayColor,
                        opacity: c.overlayOpacity,
                        cursor: c.hideOnOverlayClick ? "pointer" : "auto",
                        height: a(document).height()
                    });
                    if (!u.is(":visible")) {
                        M && a("select:not(#fancybox-tmp select)").filter(function () {
                            return this.style.visibility !== "hidden"
                        }).css({visibility: "hidden"}).one("fancybox-cleanup", function () {
                            this.style.visibility = "inherit"
                        });
                        u.show()
                    }
                } else u.hide();
                i = X();
                s = c.title || "";
                y = 0;
                n.empty().removeAttr("style").removeClass();
                if (c.titleShow !== false) {
                    if (a.isFunction(c.titleFormat)) b = c.titleFormat(s, l, p, c); else b = s && s.length ? c.titlePosition == "float" ? '<table id="fancybox-title-float-wrap" cellpadding="0" cellspacing="0"><tr><td id="fancybox-title-float-left"></td><td id="fancybox-title-float-main">' + s + '</td><td id="fancybox-title-float-right"></td></tr></table>' : '<div id="fancybox-title-' + c.titlePosition + '">' + s + "</div>" : false;
                    s = b;
                    if (!(!s || s === "")) {
                        n.addClass("fancybox-title-" + c.titlePosition).html(s).appendTo("body").show();
                        switch (c.titlePosition) {
                            case"inside":
                                n.css({width: i.width - c.padding * 2, marginLeft: c.padding, marginRight: c.padding});
                                y = n.outerHeight(true);
                                n.appendTo(D);
                                i.height += y;
                                break;
                            case"over":
                                n.css({
                                    marginLeft: c.padding,
                                    width: i.width - c.padding * 2,
                                    bottom: c.padding
                                }).appendTo(D);
                                break;
                            case"float":
                                n.css("left", parseInt((n.width() - i.width - 40) / 2, 10) * -1).appendTo(f);
                                break;
                            default:
                                n.css({
                                    width: i.width - c.padding * 2,
                                    paddingLeft: c.padding,
                                    paddingRight: c.padding
                                }).appendTo(f)
                        }
                    }
                }
                n.hide();
                if (f.is(":visible")) {
                    a(E.add(z).add(A)).hide();
                    b = f.position();
                    r = {top: b.top, left: b.left, width: f.width(), height: f.height()};
                    d = r.width == i.width && r.height == i.height;
                    j.fadeTo(c.changeFade, 0.3, function () {
                        var g = function () {
                            j.html(m.contents()).fadeTo(c.changeFade, 1, S)
                        };
                        a.event.trigger("fancybox-change");
                        j.empty().removeAttr("filter").css({
                            "border-width": c.padding, width: i.width -
                            c.padding * 2, height: e.autoDimensions ? "auto" : i.height - y - c.padding * 2
                        });
                        if (d) g(); else {
                            B.prop = 0;
                            a(B).animate({prop: 1}, {duration: c.changeSpeed, easing: c.easingChange, step: T, complete: g})
                        }
                    })
                } else {
                    f.removeAttr("style");
                    j.css("border-width", c.padding);
                    if (c.transitionIn == "elastic") {
                        r = V();
                        j.html(m.contents());
                        f.show();
                        if (c.opacity) i.opacity = 0;
                        B.prop = 0;
                        a(B).animate({prop: 1}, {duration: c.speedIn, easing: c.easingIn, step: T, complete: S})
                    } else {
                        c.titlePosition == "inside" && y > 0 && n.show();
                        j.css({
                            width: i.width - c.padding * 2,
                            height: e.autoDimensions ? "auto" : i.height - y - c.padding * 2
                        }).html(m.contents());
                        f.css(i).fadeIn(c.transitionIn == "none" ? 0 : c.speedIn, S)
                    }
                }
            }
        }, Y = function () {
            if (c.enableEscapeButton || c.enableKeyboardNav) a(document).bind("keydown.fb", function (b) {
                if (b.keyCode == 27 && c.enableEscapeButton) {
                    b.preventDefault();
                    a.fancybox.close()
                } else if ((b.keyCode == 37 || b.keyCode == 39) && c.enableKeyboardNav && b.target.tagName !== "INPUT" && b.target.tagName !== "TEXTAREA" && b.target.tagName !== "SELECT") {
                    b.preventDefault();
                    a.fancybox[b.keyCode == 37 ? "prev" : "next"]()
                }
            });
            if (c.showNavArrows) {
                if (c.cyclic && l.length > 1 || p !== 0) z.show();
                if (c.cyclic && l.length > 1 || p != l.length - 1) A.show()
            } else {
                z.hide();
                A.hide()
            }
        }, S = function () {
            if (!a.support.opacity) {
                $(j.get(0)).css('filter', 0);
                $(f.get(0)).css('filter', 0);
            }
            if (e.autoDimensions) {
                f.css("height", "auto");
                j.css("height", "auto")
            }
            s && s.length && n.show();
            c.showCloseButton && E.show();
            Y();
            c.hideOnContentClick && j.bind("click", a.fancybox.close);
            c.hideOnOverlayClick && u.bind("click", a.fancybox.close);
            a(window).bind("resize.fb", a.fancybox.resize);
            c.centerOnScroll && a(window).bind("scroll.fb", a.fancybox.center);
            if (c.type == "iframe") a('<iframe id="fancybox-frame" name="fancybox-frame' + (new Date).getTime() + '" frameborder="0" hspace="0" ' + (a.browser.msie ? 'allowtransparency="true""' : "") + ' scrolling="' + e.scrolling + '" src="' + c.href + '"></iframe>').appendTo(j);
            f.show();
            h = false;
            a.fancybox.center();
            c.onComplete(l, p, c);
            var b, d;
            if (l.length - 1 > p) {
                b = l[p + 1].href;
                if (typeof b !== "undefined" && b.match(J)) {
                    d = new Image;
                    d.src = b
                }
            }
            if (p > 0) {
                b = l[p - 1].href;
                if (typeof b !== "undefined" && b.match(J)) {
                    d = new Image;
                    d.src = b
                }
            }
        }, T = function (b) {
            var d = {
                width: parseInt(r.width + (i.width - r.width) * b, 10),
                height: parseInt(r.height + (i.height - r.height) * b, 10),
                top: parseInt(r.top + (i.top - r.top) * b, 10),
                left: parseInt(r.left + (i.left - r.left) * b, 10)
            };
            if (typeof i.opacity !== "undefined") d.opacity = b < 0.5 ? 0.5 : b;
            f.css(d);
            j.css({width: d.width - c.padding * 2, height: d.height - y * b - c.padding * 2})
        }, U = function () {
            return [a(window).width() - c.margin * 2, a(window).height() - c.margin * 2, a(document).scrollLeft() + c.margin, a(document).scrollTop() + c.margin]
        }, X = function () {
            var b = U(), d = {}, g = c.autoScale, k = c.padding * 2;
            d.width = c.width.toString().indexOf("%") > -1 ? parseInt(b[0] * parseFloat(c.width) / 100, 10) : c.width + k;
            d.height = c.height.toString().indexOf("%") > -1 ? parseInt(b[1] * parseFloat(c.height) / 100, 10) : c.height + k;
            if (g && (d.width > b[0] || d.height > b[1]))if (e.type == "image" || e.type == "swf") {
                g = c.width / c.height;
                if (d.width > b[0]) {
                    d.width = b[0];
                    d.height = parseInt((d.width - k) / g + k, 10)
                }
                if (d.height > b[1]) {
                    d.height = b[1];
                    d.width = parseInt((d.height - k) * g + k, 10)
                }
            } else {
                d.width = Math.min(d.width, b[0]);
                d.height = Math.min(d.height, b[1])
            }
            d.top = parseInt(Math.max(b[3] - 20, b[3] + (b[1] - d.height - 40) * 0.5), 10);
            d.left = parseInt(Math.max(b[2] - 20, b[2] + (b[0] - d.width - 40) * 0.5), 10);
            return d
        }, V = function () {
            var b = e.orig ? a(e.orig) : false, d = {};
            if (b && b.length) {
                d = b.offset();
                d.top += parseInt(b.css("paddingTop"), 10) || 0;
                d.left += parseInt(b.css("paddingLeft"), 10) || 0;
                d.top += parseInt(b.css("border-top-width"), 10) || 0;
                d.left += parseInt(b.css("border-left-width"), 10) || 0;
                d.width = b.width();
                d.height = b.height();
                d = {
                    width: d.width + c.padding * 2,
                    height: d.height + c.padding * 2,
                    top: d.top - c.padding - 20,
                    left: d.left - c.padding - 20
                }
            } else {
                b = U();
                d = {
                    width: c.padding * 2,
                    height: c.padding * 2,
                    top: parseInt(b[3] + b[1] * 0.5, 10),
                    left: parseInt(b[2] + b[0] * 0.5, 10)
                }
            }
            return d
        }, Z = function () {
            if (t.is(":visible")) {
                a("div", t).css("top", L * -40 + "px");
                L = (L + 1) % 12
            } else clearInterval(K)
        };
    a.fn.fancybox = function (b) {
        if (!a(this).length)return this;
        a(this).data("fancybox", a.extend({}, b, a.metadata ? a(this).metadata() : {})).unbind("click.fb").bind("click.fb", function (d) {
            d.preventDefault();
            if (!h) {
                h = true;
                a(this).blur();
                o = [];
                q = 0;
                d = a(this).attr("rel") || "";
                if (!d || d == "" || d === "nofollow") o.push(this); else {
                    o = a("a[rel=" + d + "], area[rel=" + d + "]");
                    q = o.index(this)
                }
                I()
            }
        });
        return this
    };
    a.fancybox = function (b, d) {
        var g;
        if (!h) {
            h = true;
            g = typeof d !== "undefined" ? d : {};
            o = [];
            q = parseInt(g.index, 10) || 0;
            if (a.isArray(b)) {
                for (var k = 0, C = b.length; k < C; k++)if (typeof b[k] == "object") a(b[k]).data("fancybox", a.extend({}, g, b[k])); else b[k] = a({}).data("fancybox", a.extend({content: b[k]}, g));
                o = jQuery.merge(o, b)
            } else {
                if (typeof b == "object") a(b).data("fancybox", a.extend({}, g, b)); else b = a({}).data("fancybox", a.extend({content: b}, g));
                o.push(b)
            }
            if (q > o.length || q < 0) q = 0;
            I()
        }
    };
    a.fancybox.showActivity = function () {
        clearInterval(K);
        t.show();
        K = setInterval(Z, 66)
    };
    a.fancybox.hideActivity = function () {
        t.hide()
    };
    a.fancybox.next = function () {
        return a.fancybox.pos(p + 1)
    };
    a.fancybox.prev = function () {
        return a.fancybox.pos(p - 1)
    };
    a.fancybox.pos = function (b) {
        if (!h) {
            b = parseInt(b);
            o = l;
            if (b > -1 && b < l.length) {
                q = b;
                I()
            } else if (c.cyclic && l.length > 1) {
                q = b >= l.length ? 0 : l.length - 1;
                I()
            }
        }
    };
    a.fancybox.cancel = function () {
        if (!h) {
            h = true;
            a.event.trigger("fancybox-cancel");
            N();
            e.onCancel(o, q, e);
            h = false
        }
    };
    a.fancybox.close = function () {
        function b() {
            u.fadeOut("fast");
            n.empty().hide();
            f.hide();
            a.event.trigger("fancybox-cleanup");
            j.empty();
            c.onClosed(l, p, c);
            l = e = [];
            p = q = 0;
            c = e = {};
            h = false
        }

        if (!(h || f.is(":hidden"))) {
            h = true;
            if (c && false === c.onCleanup(l, p, c)) h = false; else {
                N();
                a(E.add(z).add(A)).hide();
                a(j.add(u)).unbind();
                a(window).unbind("resize.fb scroll.fb");
                a(document).unbind("keydown.fb");
                j.find("iframe").attr("src", M && /^https/i.test(window.location.href || "") ? "javascript:void(false)" : "about:blank");
                c.titlePosition !== "inside" && n.empty();
                f.stop();
                if (c.transitionOut == "elastic") {
                    r = V();
                    var d = f.position();
                    i = {top: d.top, left: d.left, width: f.width(), height: f.height()};
                    if (c.opacity) i.opacity = 1;
                    n.empty().hide();
                    B.prop = 1;
                    a(B).animate({prop: 0}, {duration: c.speedOut, easing: c.easingOut, step: T, complete: b})
                } else f.fadeOut(c.transitionOut == "none" ? 0 : c.speedOut, b)
            }
        }
    };
    a.fancybox.resize = function () {
        u.is(":visible") && u.css("height", a(document).height());
        a.fancybox.center(true)
    };
    a.fancybox.center = function (b) {
        var d, g;
        if (!h) {
            g = b === true ? 1 : 0;
            d = U();
            !g && (f.width() > d[0] || f.height() > d[1]) || f.stop().animate({
                top: parseInt(Math.max(d[3] - 20, d[3] + (d[1] - j.height() - 40) * 0.5 - c.padding)),
                left: parseInt(Math.max(d[2] - 20, d[2] + (d[0] - j.width() - 40) * 0.5 - c.padding))
            }, typeof b == "number" ? b : 200)
        }
    };
    a.fancybox.init = function () {
        if (!a("#fancybox-wrap").length) {
            a("body").append(m = a('<div id="fancybox-tmp"></div>'), t = a('<div id="fancybox-loading"><div></div></div>'), u = a('<div id="fancybox-overlay"></div>'), f = a('<div id="fancybox-wrap"></div>'));
            D = a('<div id="fancybox-outer"></div>').append('<div class="fancybox-bg" id="fancybox-bg-n"></div><div class="fancybox-bg" id="fancybox-bg-ne"></div><div class="fancybox-bg" id="fancybox-bg-e"></div><div class="fancybox-bg" id="fancybox-bg-se"></div><div class="fancybox-bg" id="fancybox-bg-s"></div><div class="fancybox-bg" id="fancybox-bg-sw"></div><div class="fancybox-bg" id="fancybox-bg-w"></div><div class="fancybox-bg" id="fancybox-bg-nw"></div>').appendTo(f);
            D.append(j = a('<div id="fancybox-content"></div>'), E = a('<a id="fancybox-close"></a>'), n = a('<div id="fancybox-title"></div>'), z = a('<a href="javascript:;" id="fancybox-left"><span class="fancy-ico" id="fancybox-left-ico"></span></a>'), A = a('<a href="javascript:;" id="fancybox-right"><span class="fancy-ico" id="fancybox-right-ico"></span></a>'));
            E.click(a.fancybox.close);
            t.click(a.fancybox.cancel);
            z.click(function (b) {
                b.preventDefault();
                a.fancybox.prev()
            });
            A.click(function (b) {
                b.preventDefault();
                a.fancybox.next()
            });
            a.fn.mousewheel && f.bind("mousewheel.fb", function (b, d) {
                if (h || c.type == "image") b.preventDefault();
                a.fancybox[d > 0 ? "prev" : "next"]()
            });
            a.support.opacity || f.addClass("fancybox-ie");
            if (M) {
                t.addClass("fancybox-ie6");
                f.addClass("fancybox-ie6");
                a('<iframe id="fancybox-hide-sel-frame" src="' + (/^https/i.test(window.location.href || "") ? "javascript:void(false)" : "about:blank") + '" scrolling="no" border="0" frameborder="0" tabindex="-1"></iframe>').prependTo(D)
            }
        }
    };
    a.fn.fancybox.defaults = {
        padding: 10,
        margin: 40,
        opacity: false,
        modal: false,
        cyclic: false,
        scrolling: "auto",
        width: 560,
        height: 340,
        autoScale: true,
        autoDimensions: true,
        centerOnScroll: false,
        ajax: {},
        swf: {wmode: "transparent"},
        hideOnOverlayClick: true,
        hideOnContentClick: false,
        overlayShow: true,
        overlayOpacity: 0.7,
        overlayColor: "#777",
        titleShow: true,
        titlePosition: "float",
        titleFormat: null,
        titleFromAlt: false,
        transitionIn: "fade",
        transitionOut: "fade",
        speedIn: 300,
        speedOut: 300,
        changeSpeed: 300,
        changeFade: "fast",
        easingIn: "swing",
        easingOut: "swing",
        showCloseButton: true,
        showNavArrows: true,
        enableEscapeButton: true,
        enableKeyboardNav: true,
        onStart: function () {
        },
        onCancel: function () {
        },
        onComplete: function () {
        },
        onCleanup: function () {
        },
        onClosed: function () {
        },
        onError: function () {
        }
    };
    a(document).ready(function () {
        a.fancybox.init()
    })
})(jQuery);
;;(function ($) {
    var ColorPicker = function () {
        var
            ids = {}, inAction, charMin = 65, visible,
            tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit"></div></div>',
            defaults = {
                eventName: 'click', onShow: function () {
                }, onBeforeShow: function () {
                }, onHide: function () {
                }, onChange: function () {
                }, onSubmit: function () {
                }, color: 'ff0000', livePreview: true, flat: false
            }, fillRGBFields = function (hsb, cal) {
                var rgb = HSBToRGB(hsb);
                $(cal).data('colorpicker').fields.eq(1).val(rgb.r).end().eq(2).val(rgb.g).end().eq(3).val(rgb.b).end();
            }, fillHSBFields = function (hsb, cal) {
                $(cal).data('colorpicker').fields.eq(4).val(hsb.h).end().eq(5).val(hsb.s).end().eq(6).val(hsb.b).end();
            }, fillHexFields = function (hsb, cal) {
                $(cal).data('colorpicker').fields.eq(0).val(HSBToHex(hsb)).end();
            }, setSelector = function (hsb, cal) {
                $(cal).data('colorpicker').selector.css('backgroundColor', '#' + HSBToHex({h: hsb.h, s: 100, b: 100}));
                $(cal).data('colorpicker').selectorIndic.css({
                    left: parseInt(150 * hsb.s / 100, 10),
                    top: parseInt(150 * (100 - hsb.b) / 100, 10)
                });
            }, setHue = function (hsb, cal) {
                $(cal).data('colorpicker').hue.css('top', parseInt(150 - 150 * hsb.h / 360, 10));
            }, setCurrentColor = function (hsb, cal) {
                $(cal).data('colorpicker').currentColor.css('backgroundColor', '#' + HSBToHex(hsb));
            }, setNewColor = function (hsb, cal) {
                $(cal).data('colorpicker').newColor.css('backgroundColor', '#' + HSBToHex(hsb));
            }, keyDown = function (ev) {
                var pressedKey = ev.charCode || ev.keyCode || -1;
                if ((pressedKey > charMin && pressedKey <= 90) || pressedKey == 32) {
                    return false;
                }
                var cal = $(this).parent().parent();
                if (cal.data('colorpicker').livePreview === true) {
                    change.apply(this);
                }
            }, change = function (ev) {
                var cal = $(this).parent().parent(), col;
                if (this.parentNode.className.indexOf('_hex') > 0) {
                    cal.data('colorpicker').color = col = HexToHSB(fixHex(this.value));
                } else if (this.parentNode.className.indexOf('_hsb') > 0) {
                    cal.data('colorpicker').color = col = fixHSB({
                        h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
                        s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
                        b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
                    });
                } else {
                    cal.data('colorpicker').color = col = RGBToHSB(fixRGB({
                        r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
                        g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
                        b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
                    }));
                }
                if (ev) {
                    fillRGBFields(col, cal.get(0));
                    fillHexFields(col, cal.get(0));
                    fillHSBFields(col, cal.get(0));
                }
                setSelector(col, cal.get(0));
                setHue(col, cal.get(0));
                setNewColor(col, cal.get(0));
                cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
            }, blur = function (ev) {
                var cal = $(this).parent().parent();
                cal.data('colorpicker').fields.parent().removeClass('colorpicker_focus');
            }, focus = function () {
                charMin = this.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
                $(this).parent().parent().data('colorpicker').fields.parent().removeClass('colorpicker_focus');
                $(this).parent().addClass('colorpicker_focus');
            }, downIncrement = function (ev) {
                var field = $(this).parent().find('input').focus();
                var current = {
                    el: $(this).parent().addClass('colorpicker_slider'),
                    max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : (this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255),
                    y: ev.pageY,
                    field: field,
                    val: parseInt(field.val(), 10),
                    preview: $(this).parent().parent().data('colorpicker').livePreview
                };
                $(document).bind('mouseup', current, upIncrement);
                $(document).bind('mousemove', current, moveIncrement);
            }, moveIncrement = function (ev) {
                ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));
                if (ev.data.preview) {
                    change.apply(ev.data.field.get(0), [true]);
                }
                return false;
            }, upIncrement = function (ev) {
                change.apply(ev.data.field.get(0), [true]);
                ev.data.el.removeClass('colorpicker_slider').find('input').focus();
                $(document).unbind('mouseup', upIncrement);
                $(document).unbind('mousemove', moveIncrement);
                return false;
            }, downHue = function (ev) {
                var current = {cal: $(this).parent(), y: $(this).offset().top};
                current.preview = current.cal.data('colorpicker').livePreview;
                $(document).bind('mouseup', current, upHue);
                $(document).bind('mousemove', current, moveHue);
            }, moveHue = function (ev) {
                change.apply(ev.data.cal.data('colorpicker').fields.eq(4).val(parseInt(360 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.y)))) / 150, 10)).get(0), [ev.data.preview]);
                return false;
            }, upHue = function (ev) {
                fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                $(document).unbind('mouseup', upHue);
                $(document).unbind('mousemove', moveHue);
                return false;
            }, downSelector = function (ev) {
                var current = {cal: $(this).parent(), pos: $(this).offset()};
                current.preview = current.cal.data('colorpicker').livePreview;
                $(document).bind('mouseup', current, upSelector);
                $(document).bind('mousemove', current, moveSelector);
            }, moveSelector = function (ev) {
                change.apply(ev.data.cal.data('colorpicker').fields.eq(6).val(parseInt(100 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.pos.top)))) / 150, 10)).end().eq(5).val(parseInt(100 * (Math.max(0, Math.min(150, (ev.pageX - ev.data.pos.left)))) / 150, 10)).get(0), [ev.data.preview]);
                return false;
            }, upSelector = function (ev) {
                moveSelector(ev);
                fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                $(document).unbind('mouseup', upSelector);
                $(document).unbind('mousemove', moveSelector);
                return false;
            }, enterSubmit = function (ev) {
                $(this).addClass('colorpicker_focus');
            }, leaveSubmit = function (ev) {
                $(this).removeClass('colorpicker_focus');
            }, clickSubmit = function (ev) {
                var cal = $(this).parent();
                var col = cal.data('colorpicker').color;
                cal.data('colorpicker').origColor = col;
                setCurrentColor(col, cal.get(0));
                cal.data('colorpicker').onSubmit(col, HSBToHex(col), HSBToRGB(col), cal.data('colorpicker').el);
            }, show = function (ev) {
                var cal = $('#' + $(this).data('colorpickerId'));
                cal.data('colorpicker').onBeforeShow.apply(this, [cal.get(0)]);
                var pos = $(this).offset();
                var viewPort = getViewport();
                var top = pos.top + this.offsetHeight;
                var left = pos.left;
                if (top + 176 > viewPort.t + viewPort.h) {
                    top -= this.offsetHeight + 176;
                }
                if (left + 356 > viewPort.l + viewPort.w) {
                    left -= 356;
                }
                cal.css({left: left + 'px', top: top + 'px'});
                if (cal.data('colorpicker').onShow.apply(this, [cal.get(0)]) != false) {
                    cal.show();
                }
                $(document).bind('mousedown', {cal: cal}, hide);
                return false;
            }, hide = function (ev) {
                if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
                    if (ev.data.cal.data('colorpicker').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
                        ev.data.cal.hide();
                    }
                    $(document).unbind('mousedown', hide);
                }
            }, isChildOf = function (parentEl, el, container) {
                if (parentEl == el) {
                    return true;
                }
                if (parentEl.contains) {
                    return parentEl.contains(el);
                }
                if (parentEl.compareDocumentPosition) {
                    return !!(parentEl.compareDocumentPosition(el) & 16);
                }
                var prEl = el.parentNode;
                while (prEl && prEl != container) {
                    if (prEl == parentEl)
                        return true;
                    prEl = prEl.parentNode;
                }
                return false;
            }, getViewport = function () {
                var m = document.compatMode == 'CSS1Compat';
                return {
                    l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
                    t: window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
                    w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
                    h: window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
                };
            }, fixHSB = function (hsb) {
                return {
                    h: Math.min(360, Math.max(0, hsb.h)),
                    s: Math.min(100, Math.max(0, hsb.s)),
                    b: Math.min(100, Math.max(0, hsb.b))
                };
            }, fixRGB = function (rgb) {
                return {
                    r: Math.min(255, Math.max(0, rgb.r)),
                    g: Math.min(255, Math.max(0, rgb.g)),
                    b: Math.min(255, Math.max(0, rgb.b))
                };
            }, fixHex = function (hex) {
                var len = 6 - hex.length;
                if (len > 0) {
                    var o = [];
                    for (var i = 0; i < len; i++) {
                        o.push('0');
                    }
                    o.push(hex);
                    hex = o.join('');
                }
                return hex;
            }, HexToRGB = function (hex) {
                var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
                return {r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF)};
            }, HexToHSB = function (hex) {
                return RGBToHSB(HexToRGB(hex));
            }, RGBToHSB = function (rgb) {
                var hsb = {h: 0, s: 0, b: 0};
                var min = Math.min(rgb.r, rgb.g, rgb.b);
                var max = Math.max(rgb.r, rgb.g, rgb.b);
                var delta = max - min;
                hsb.b = max;
                if (max != 0) {
                }
                hsb.s = max != 0 ? 255 * delta / max : 0;
                if (hsb.s != 0) {
                    if (rgb.r == max) {
                        hsb.h = (rgb.g - rgb.b) / delta;
                    } else if (rgb.g == max) {
                        hsb.h = 2 + (rgb.b - rgb.r) / delta;
                    } else {
                        hsb.h = 4 + (rgb.r - rgb.g) / delta;
                    }
                } else {
                    hsb.h = -1;
                }
                hsb.h *= 60;
                if (hsb.h < 0) {
                    hsb.h += 360;
                }
                hsb.s *= 100 / 255;
                hsb.b *= 100 / 255;
                return hsb;
            }, HSBToRGB = function (hsb) {
                var rgb = {};
                var h = Math.round(hsb.h);
                var s = Math.round(hsb.s * 255 / 100);
                var v = Math.round(hsb.b * 255 / 100);
                if (s == 0) {
                    rgb.r = rgb.g = rgb.b = v;
                } else {
                    var t1 = v;
                    var t2 = (255 - s) * v / 255;
                    var t3 = (t1 - t2) * (h % 60) / 60;
                    if (h == 360) h = 0;
                    if (h < 60) {
                        rgb.r = t1;
                        rgb.b = t2;
                        rgb.g = t2 + t3
                    }
                    else if (h < 120) {
                        rgb.g = t1;
                        rgb.b = t2;
                        rgb.r = t1 - t3
                    }
                    else if (h < 180) {
                        rgb.g = t1;
                        rgb.r = t2;
                        rgb.b = t2 + t3
                    }
                    else if (h < 240) {
                        rgb.b = t1;
                        rgb.r = t2;
                        rgb.g = t1 - t3
                    }
                    else if (h < 300) {
                        rgb.b = t1;
                        rgb.g = t2;
                        rgb.r = t2 + t3
                    }
                    else if (h < 360) {
                        rgb.r = t1;
                        rgb.g = t2;
                        rgb.b = t1 - t3
                    }
                    else {
                        rgb.r = 0;
                        rgb.g = 0;
                        rgb.b = 0
                    }
                }
                return {r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b)};
            }, RGBToHex = function (rgb) {
                var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];
                $.each(hex, function (nr, val) {
                    if (val.length == 1) {
                        hex[nr] = '0' + val;
                    }
                });
                return hex.join('');
            }, HSBToHex = function (hsb) {
                return RGBToHex(HSBToRGB(hsb));
            }, restoreOriginal = function () {
                var cal = $(this).parent();
                var col = cal.data('colorpicker').origColor;
                cal.data('colorpicker').color = col;
                fillRGBFields(col, cal.get(0));
                fillHexFields(col, cal.get(0));
                fillHSBFields(col, cal.get(0));
                setSelector(col, cal.get(0));
                setHue(col, cal.get(0));
                setNewColor(col, cal.get(0));
            };
        return {
            init: function (opt) {
                opt = $.extend({}, defaults, opt || {});
                if (typeof opt.color == 'string') {
                    opt.color = HexToHSB(opt.color);
                } else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
                    opt.color = RGBToHSB(opt.color);
                } else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
                    opt.color = fixHSB(opt.color);
                } else {
                    return this;
                }
                return this.each(function () {
                    if (!$(this).data('colorpickerId')) {
                        var options = $.extend({}, opt);
                        options.origColor = opt.color;
                        var id = 'collorpicker_' + parseInt(Math.random() * 1000);
                        $(this).data('colorpickerId', id);
                        var cal = $(tpl).attr('id', id);
                        if (options.flat) {
                            cal.appendTo(this).show();
                        } else {
                            cal.appendTo(document.body);
                        }
                        options.fields = cal.find('input').bind('keyup', keyDown).bind('change', change).bind('blur', blur).bind('focus', focus);
                        cal.find('span').bind('mousedown', downIncrement).end().find('>div.colorpicker_current_color').bind('click', restoreOriginal);
                        options.selector = cal.find('div.colorpicker_color').bind('mousedown', downSelector);
                        options.selectorIndic = options.selector.find('div div');
                        options.el = this;
                        options.hue = cal.find('div.colorpicker_hue div');
                        cal.find('div.colorpicker_hue').bind('mousedown', downHue);
                        options.newColor = cal.find('div.colorpicker_new_color');
                        options.currentColor = cal.find('div.colorpicker_current_color');
                        cal.data('colorpicker', options);
                        cal.find('div.colorpicker_submit').bind('mouseenter', enterSubmit).bind('mouseleave', leaveSubmit).bind('click', clickSubmit);
                        fillRGBFields(options.color, cal.get(0));
                        fillHSBFields(options.color, cal.get(0));
                        fillHexFields(options.color, cal.get(0));
                        setHue(options.color, cal.get(0));
                        setSelector(options.color, cal.get(0));
                        setCurrentColor(options.color, cal.get(0));
                        setNewColor(options.color, cal.get(0));
                        if (options.flat) {
                            cal.css({position: 'relative', display: 'block'});
                        } else {
                            $(this).bind(options.eventName, show);
                        }
                    }
                });
            }, showPicker: function () {
                return this.each(function () {
                    if ($(this).data('colorpickerId')) {
                        show.apply(this);
                    }
                });
            }, hidePicker: function () {
                return this.each(function () {
                    if ($(this).data('colorpickerId')) {
                        $('#' + $(this).data('colorpickerId')).hide();
                    }
                });
            }, setColor: function (col) {
                if (typeof col == 'string') {
                    col = HexToHSB(col);
                } else if (col.r != undefined && col.g != undefined && col.b != undefined) {
                    col = RGBToHSB(col);
                } else if (col.h != undefined && col.s != undefined && col.b != undefined) {
                    col = fixHSB(col);
                } else {
                    return this;
                }
                return this.each(function () {
                    if ($(this).data('colorpickerId')) {
                        var cal = $('#' + $(this).data('colorpickerId'));
                        cal.data('colorpicker').color = col;
                        cal.data('colorpicker').origColor = col;
                        fillRGBFields(col, cal.get(0));
                        fillHSBFields(col, cal.get(0));
                        fillHexFields(col, cal.get(0));
                        setHue(col, cal.get(0));
                        setSelector(col, cal.get(0));
                        setCurrentColor(col, cal.get(0));
                        setNewColor(col, cal.get(0));
                    }
                });
            }
        };
    }();
    $.fn.extend({
        ColorPicker: ColorPicker.init,
        ColorPickerHide: ColorPicker.hidePicker,
        ColorPickerShow: ColorPicker.showPicker,
        ColorPickerSetColor: ColorPicker.setColor
    });
})(jQuery);
(function ($) {
    "use strict";
    var managed = {}, cache = {};
    $.manageAjax = (function () {
        function create(name, opts) {
            managed[name] = new $.manageAjax._manager(name, opts);
            return managed[name];
        }

        function destroy(name) {
            if (managed[name]) {
                managed[name].clear(true);
                delete managed[name];
            }
        }

        var publicFns = {create: create, destroy: destroy};
        return publicFns;
    })();
    $.manageAjax._manager = function (name, opts) {
        this.requests = {};
        this.inProgress = 0;
        this.name = name;
        this.qName = name;
        this.opts = $.extend({}, $.manageAjax.defaults, opts);
        if (opts && opts.queue && opts.queue !== true && typeof opts.queue === 'string' && opts.queue !== 'clear') {
            this.qName = opts.queue;
        }
    };
    $.manageAjax._manager.prototype = {
        add: function (url, o) {
            if (typeof url == 'object') {
                o = url;
            } else if (typeof url == 'string') {
                o = $.extend(o || {}, {url: url});
            }
            o = $.extend({}, this.opts, o);
            var origCom = o.complete || $.noop, origSuc = o.success || $.noop, beforeSend = o.beforeSend || $.noop,
                origError = o.error || $.noop, strData = (typeof o.data == 'string') ? o.data : $.param(o.data || {}),
                xhrID = o.type + o.url + strData, that = this, ajaxFn = this._createAjax(xhrID, o, origSuc, origCom);
            if (o.preventDoubleRequests && o.queueDuplicateRequests) {
                if (o.preventDoubleRequests) {
                    o.queueDuplicateRequests = false;
                }
                setTimeout(function () {
                    throw("preventDoubleRequests and queueDuplicateRequests can't be both true");
                }, 0);
            }
            if (this.requests[xhrID] && o.preventDoubleRequests) {
                return;
            }
            ajaxFn.xhrID = xhrID;
            o.xhrID = xhrID;
            o.beforeSend = function (xhr, opts) {
                var ret = beforeSend.call(this, xhr, opts);
                if (ret === false) {
                    that._removeXHR(xhrID);
                }
                xhr = null;
                return ret;
            };
            o.complete = function (xhr, status) {
                that._complete.call(that, this, origCom, xhr, status, xhrID, o);
                xhr = null;
            };
            o.success = function (data, status, xhr) {
                that._success.call(that, this, origSuc, data, status, xhr, o);
                xhr = null;
            };
            o.error = function (ahr, status, errorStr) {
                var httpStatus = '', content = '';
                if (status !== 'timeout' && ahr) {
                    httpStatus = ahr.status;
                    content = ahr.responseXML || ahr.responseText;
                }
                if (origError) {
                    origError.call(this, ahr, status, errorStr, o);
                } else {
                    setTimeout(function () {
                        throw status + '| status: ' + httpStatus + ' | URL: ' + o.url + ' | data: ' + strData + ' | thrown: ' + errorStr + ' | response: ' + content;
                    }, 0);
                }
                ahr = null;
            };
            if (o.queue === 'clear') {
                $(document).clearQueue(this.qName);
            }
            if (o.queue || (o.queueDuplicateRequests && this.requests[xhrID])) {
                $.queue(document, this.qName, ajaxFn);
                if (this.inProgress < o.maxRequests && (!this.requests[xhrID] || !o.queueDuplicateRequests)) {
                    $.dequeue(document, this.qName);
                }
                return xhrID;
            }
            return ajaxFn();
        }, _createAjax: function (id, o, origSuc, origCom) {
            var that = this;
            return function () {
                if (o.beforeCreate.call(o.context || that, id, o) === false) {
                    return;
                }
                that.inProgress++;
                if (that.inProgress === 1) {
                    $.event.trigger(that.name + 'AjaxStart');
                }
                if (o.cacheResponse && cache[id]) {
                    if (!cache[id].cacheTTL || cache[id].cacheTTL < 0 || ((new Date().getTime() - cache[id].timestamp) < cache[id].cacheTTL)) {
                        that.requests[id] = {};
                        setTimeout(function () {
                            that._success.call(that, o.context || o, origSuc, cache[id]._successData, 'success', cache[id], o);
                            that._complete.call(that, o.context || o, origCom, cache[id], 'success', id, o);
                        }, 0);
                    } else {
                        delete cache[id];
                    }
                }
                if (!o.cacheResponse || !cache[id]) {
                    if (o.async) {
                        that.requests[id] = $.ajax(o);
                    } else {
                        $.ajax(o);
                    }
                }
                return id;
            };
        }, _removeXHR: function (xhrID) {
            if (this.opts.queue || this.opts.queueDuplicateRequests) {
                $.dequeue(document, this.qName);
            }
            this.inProgress--;
            this.requests[xhrID] = null;
            delete this.requests[xhrID];
        }, clearCache: function () {
            cache = {};
        }, _isAbort: function (xhr, status, o) {
            if (!o.abortIsNoSuccess || (!xhr && !status)) {
                return false;
            }
            var ret = !!((!xhr || xhr.readyState === 0 || this.lastAbort === o.xhrID));
            xhr = null;
            return ret;
        }, _complete: function (context, origFn, xhr, status, xhrID, o) {
            if (this._isAbort(xhr, status, o)) {
                status = 'abort';
                o.abort.call(context, xhr, status, o);
            }
            origFn.call(context, xhr, status, o);
            $.event.trigger(this.name + 'AjaxComplete', [xhr, status, o]);
            if (o.domCompleteTrigger) {
                $(o.domCompleteTrigger).trigger(this.name + 'DOMComplete', [xhr, status, o]).trigger('DOMComplete', [xhr, status, o]);
            }
            this._removeXHR(xhrID);
            if (!this.inProgress) {
                $.event.trigger(this.name + 'AjaxStop');
            }
            xhr = null;
        }, _success: function (context, origFn, data, status, xhr, o) {
            var that = this;
            if (this._isAbort(xhr, status, o)) {
                xhr = null;
                return;
            }
            if (o.abortOld) {
                $.each(this.requests, function (name) {
                    if (name === o.xhrID) {
                        return false;
                    }
                    that.abort(name);
                });
            }
            if (o.cacheResponse && !cache[o.xhrID]) {
                if (!xhr) {
                    xhr = {};
                }
                cache[o.xhrID] = {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    responseText: xhr.responseText,
                    responseXML: xhr.responseXML,
                    _successData: data,
                    cacheTTL: o.cacheTTL,
                    timestamp: new Date().getTime()
                };
                if ('getAllResponseHeaders' in xhr) {
                    var responseHeaders = xhr.getAllResponseHeaders();
                    var parsedHeaders;
                    var parseHeaders = function () {
                        if (parsedHeaders) {
                            return;
                        }
                        parsedHeaders = {};
                        $.each(responseHeaders.split("\n"), function (i, headerLine) {
                            var delimiter = headerLine.indexOf(":");
                            parsedHeaders[headerLine.substr(0, delimiter)] = headerLine.substr(delimiter + 2);
                        });
                    };
                    $.extend(cache[o.xhrID], {
                        getAllResponseHeaders: function () {
                            return responseHeaders;
                        }, getResponseHeader: function (name) {
                            parseHeaders();
                            return (name in parsedHeaders) ? parsedHeaders[name] : null;
                        }
                    });
                }
            }
            origFn.call(context, data, status, xhr, o);
            $.event.trigger(this.name + 'AjaxSuccess', [xhr, o, data]);
            if (o.domSuccessTrigger) {
                $(o.domSuccessTrigger).trigger(this.name + 'DOMSuccess', [data, o]).trigger('DOMSuccess', [data, o]);
            }
            xhr = null;
        }, getData: function (id) {
            if (id) {
                var ret = this.requests[id];
                if (!ret && this.opts.queue) {
                    ret = $.grep($(document).queue(this.qName), function (fn, i) {
                        return (fn.xhrID === id);
                    })[0];
                }
                return ret;
            }
            return {
                requests: this.requests,
                queue: (this.opts.queue) ? $(document).queue(this.qName) : [],
                inProgress: this.inProgress
            };
        }, abort: function (id) {
            var xhr;
            if (id) {
                xhr = this.getData(id);
                if (xhr && xhr.abort) {
                    this.lastAbort = id;
                    xhr.abort();
                    this.lastAbort = false;
                } else {
                    $(document).queue(this.qName, $.grep($(document).queue(this.qName), function (fn, i) {
                        return (fn !== xhr);
                    }));
                }
                xhr = null;
                return;
            }
            var that = this, ids = [];
            $.each(this.requests, function (id) {
                ids.push(id);
            });
            $.each(ids, function (i, id) {
                that.abort(id);
            });
        }, clear: function (shouldAbort) {
            $(document).clearQueue(this.qName);
            if (shouldAbort) {
                this.abort();
            }
        }
    };
    $.manageAjax._manager.prototype.getXHR = $.manageAjax._manager.prototype.getData;
    $.manageAjax.defaults = {
        beforeCreate: $.noop,
        abort: $.noop,
        abortIsNoSuccess: true,
        maxRequests: 1,
        cacheResponse: false,
        async: true,
        domCompleteTrigger: false,
        domSuccessTrigger: false,
        preventDoubleRequests: true,
        queueDuplicateRequests: false,
        cacheTTL: -1,
        queue: false
    };
    $.each($.manageAjax._manager.prototype, function (n, fn) {
        if (n.indexOf('_') === 0 || !$.isFunction(fn)) {
            return;
        }
        $.manageAjax[n] = function (name, o) {
            if (!managed[name]) {
                if (n === 'add') {
                    $.manageAjax.create(name, o);
                } else {
                    return;
                }
            }
            var args = Array.prototype.slice.call(arguments, 1);
            managed[name][n].apply(managed[name], args);
        };
    });
})(jQuery);
;;(function ($) {
    if (/1\.(0|1|2)\.(0|1|2)/.test($.fn.jquery) || /^1.1/.test($.fn.jquery)) {
        alert('blockUI requires jQuery v1.2.3 or later!  You are using v' + $.fn.jquery);
        return;
    }
    $.fn._fadeIn = $.fn.fadeIn;
    var noOp = function () {
    };
    var mode = document.documentMode || 0;
    var setExpr = $.browser.msie && (($.browser.version < 8 && !mode) || mode < 8);
    var ie6 = $.browser.msie && /MSIE 6.0/.test(navigator.userAgent) && !mode;
    $.blockUI = function (opts) {
        install(window, opts);
    };
    $.unblockUI = function (opts) {
        remove(window, opts);
    };
    $.growlUI = function (title, message, timeout, onClose) {
        var $m = $('<div class="growlUI"></div>');
        if (title) $m.append('<h1>' + title + '</h1>');
        if (message) $m.append('<h2>' + message + '</h2>');
        if (timeout == undefined) timeout = 3000;
        $.blockUI({
            message: $m,
            fadeIn: 700,
            fadeOut: 1000,
            centerY: false,
            timeout: timeout,
            showOverlay: false,
            onUnblock: onClose,
            css: $.blockUI.defaults.growlCSS
        });
    };
    $.fn.block = function (opts) {
        return this.unblock({fadeOut: 0}).each(function () {
            if ($.css(this, 'position') == 'static')
                this.style.position = 'relative';
            if ($.browser.msie)
                this.style.zoom = 1;
            install(this, opts);
        });
    };
    $.fn.unblock = function (opts) {
        return this.each(function () {
            remove(this, opts);
        });
    };
    $.blockUI.version = 2.38;
    $.blockUI.defaults = {
        message: '<h1>Please wait...</h1>',
        title: null,
        draggable: true,
        theme: false,
        css: {
            padding: 0,
            margin: 0,
            width: '30%',
            top: '40%',
            left: '35%',
            textAlign: 'center',
            color: '#000',
            border: '3px solid #aaa',
            backgroundColor: '#fff',
            cursor: 'wait'
        },
        themedCSS: {width: '30%', top: '40%', left: '35%'},
        overlayCSS: {backgroundColor: '#000', opacity: 0.6, cursor: 'wait'},
        growlCSS: {
            width: '350px',
            top: '10px',
            left: '',
            right: '10px',
            border: 'none',
            padding: '5px',
            opacity: 0.6,
            cursor: 'default',
            color: '#fff',
            backgroundColor: '#000',
            '-webkit-border-radius': '10px',
            '-moz-border-radius': '10px',
            'border-radius': '10px'
        },
        iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank',
        forceIframe: false,
        baseZ: 1000,
        centerX: true,
        centerY: true,
        allowBodyStretch: true,
        bindEvents: true,
        constrainTabKey: true,
        fadeIn: 200,
        fadeOut: 400,
        timeout: 0,
        showOverlay: true,
        focusInput: true,
        applyPlatformOpacityRules: true,
        onBlock: null,
        onUnblock: null,
        quirksmodeOffsetHack: 4,
        blockMsgClass: 'blockMsg'
    };
    var pageBlock = null;
    var pageBlockEls = [];

    function install(el, opts) {
        var full = (el == window);
        var msg = opts && opts.message !== undefined ? opts.message : undefined;
        opts = $.extend({}, $.blockUI.defaults, opts || {});
        opts.overlayCSS = $.extend({}, $.blockUI.defaults.overlayCSS, opts.overlayCSS || {});
        var css = $.extend({}, $.blockUI.defaults.css, opts.css || {});
        var themedCSS = $.extend({}, $.blockUI.defaults.themedCSS, opts.themedCSS || {});
        msg = msg === undefined ? opts.message : msg;
        if (full && pageBlock)
            remove(window, {fadeOut: 0});
        if (msg && typeof msg != 'string' && (msg.parentNode || msg.jquery)) {
            var node = msg.jquery ? msg[0] : msg;
            var data = {};
            $(el).data('blockUI.history', data);
            data.el = node;
            data.parent = node.parentNode;
            data.display = node.style.display;
            data.position = node.style.position;
            if (data.parent)
                data.parent.removeChild(node);
        }
        var z = opts.baseZ;
        var lyr1 = ($.browser.msie || opts.forceIframe) ? $('<iframe class="blockUI" style="z-index:' + (z++) + ';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="' + opts.iframeSrc + '"></iframe>') : $('<div class="blockUI" style="display:none"></div>');
        var lyr2 = opts.theme ? $('<div class="blockUI blockOverlay ui-widget-overlay" style="z-index:' + (z++) + ';display:none"></div>') : $('<div class="blockUI blockOverlay" style="z-index:' + (z++) + ';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>');
        var lyr3, s;
        if (opts.theme && full) {
            s = '<div class="blockUI ' + opts.blockMsgClass + ' blockPage ui-dialog ui-widget ui-corner-all" style="z-index:' + z + ';display:none;position:fixed">' + '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (opts.title || '&nbsp;') + '</div>' + '<div class="ui-widget-content ui-dialog-content"></div>' + '</div>';
        }
        else if (opts.theme) {
            s = '<div class="blockUI ' + opts.blockMsgClass + ' blockElement ui-dialog ui-widget ui-corner-all" style="z-index:' + z + ';display:none;position:absolute">' + '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (opts.title || '&nbsp;') + '</div>' + '<div class="ui-widget-content ui-dialog-content"></div>' + '</div>';
        }
        else if (full) {
            s = '<div class="blockUI ' + opts.blockMsgClass + ' blockPage" style="z-index:' + z + ';display:none;position:fixed"></div>';
        }
        else {
            s = '<div class="blockUI ' + opts.blockMsgClass + ' blockElement" style="z-index:' + z + ';display:none;position:absolute"></div>';
        }
        lyr3 = $(s);
        if (msg) {
            if (opts.theme) {
                lyr3.css(themedCSS);
                lyr3.addClass('ui-widget-content');
            }
            else
                lyr3.css(css);
        }
        if (!opts.theme && (!opts.applyPlatformOpacityRules || !($.browser.mozilla && /Linux/.test(navigator.platform))))
            lyr2.css(opts.overlayCSS);
        lyr2.css('position', full ? 'fixed' : 'absolute');
        if ($.browser.msie || opts.forceIframe)
            lyr1.css('opacity', 0.0);
        var layers = [lyr1, lyr2, lyr3], $par = full ? $('body') : $(el);
        $.each(layers, function () {
            this.appendTo($par);
        });
        if (opts.theme && opts.draggable && $.fn.draggable) {
            lyr3.draggable({handle: '.ui-dialog-titlebar', cancel: 'li'});
        }
        var expr = setExpr && (!$.boxModel || $('object,embed', full ? null : el).length > 0);
        if (ie6 || expr) {
            if (full && opts.allowBodyStretch && $.boxModel)
                $('html,body').css('height', '100%');
            if ((ie6 || !$.boxModel) && !full) {
                var t = sz(el, 'borderTopWidth'), l = sz(el, 'borderLeftWidth');
                var fixT = t ? '(0 - ' + t + ')' : 0;
                var fixL = l ? '(0 - ' + l + ')' : 0;
            }
            $.each([lyr1, lyr2, lyr3], function (i, o) {
                var s = o[0].style;
                s.position = 'absolute';
                if (i < 2) {
                    full ? s.setExpression('height', 'Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.boxModel?0:' + opts.quirksmodeOffsetHack + ') + "px"') : s.setExpression('height', 'this.parentNode.offsetHeight + "px"');
                    full ? s.setExpression('width', 'jQuery.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"') : s.setExpression('width', 'this.parentNode.offsetWidth + "px"');
                    if (fixL) s.setExpression('left', fixL);
                    if (fixT) s.setExpression('top', fixT);
                }
                else if (opts.centerY) {
                    if (full) s.setExpression('top', '(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"');
                    s.marginTop = 0;
                }
                else if (!opts.centerY && full) {
                    var top = (opts.css && opts.css.top) ? parseInt(opts.css.top) : 0;
                    var expression = '((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + ' + top + ') + "px"';
                    s.setExpression('top', expression);
                }
            });
        }
        if (msg) {
            if (opts.theme)
                lyr3.find('.ui-widget-content').append(msg); else
                lyr3.append(msg);
            if (msg.jquery || msg.nodeType)
                $(msg).show();
        }
        if (($.browser.msie || opts.forceIframe) && opts.showOverlay)
            lyr1.show();
        if (opts.fadeIn) {
            var cb = opts.onBlock ? opts.onBlock : noOp;
            var cb1 = (opts.showOverlay && !msg) ? cb : noOp;
            var cb2 = msg ? cb : noOp;
            if (opts.showOverlay)
                lyr2._fadeIn(opts.fadeIn, cb1);
            if (msg)
                lyr3._fadeIn(opts.fadeIn, cb2);
        }
        else {
            if (opts.showOverlay)
                lyr2.show();
            if (msg)
                lyr3.show();
            if (opts.onBlock)
                opts.onBlock();
        }
        bind(1, el, opts);
        if (full) {
            pageBlock = lyr3[0];
            pageBlockEls = $(':input:enabled:visible', pageBlock);
            if (opts.focusInput)
                setTimeout(focus, 20);
        }
        else
            center(lyr3[0], opts.centerX, opts.centerY);
        if (opts.timeout) {
            var to = setTimeout(function () {
                full ? $.unblockUI(opts) : $(el).unblock(opts);
            }, opts.timeout);
            $(el).data('blockUI.timeout', to);
        }
    };
    function remove(el, opts) {
        var full = (el == window);
        var $el = $(el);
        var data = $el.data('blockUI.history');
        var to = $el.data('blockUI.timeout');
        if (to) {
            clearTimeout(to);
            $el.removeData('blockUI.timeout');
        }
        opts = $.extend({}, $.blockUI.defaults, opts || {});
        bind(0, el, opts);
        var els;
        if (full)
            els = $('body').children().filter('.blockUI').add('body > .blockUI'); else
            els = $('.blockUI', el);
        if (full)
            pageBlock = pageBlockEls = null;
        if (opts.fadeOut) {
            els.fadeOut(opts.fadeOut);
            setTimeout(function () {
                reset(els, data, opts, el);
            }, opts.fadeOut);
        }
        else
            reset(els, data, opts, el);
    };
    function reset(els, data, opts, el) {
        els.each(function (i, o) {
            if (this.parentNode)
                this.parentNode.removeChild(this);
        });
        if (data && data.el) {
            data.el.style.display = data.display;
            data.el.style.position = data.position;
            if (data.parent)
                data.parent.appendChild(data.el);
            $(el).removeData('blockUI.history');
        }
        if (typeof opts.onUnblock == 'function')
            opts.onUnblock(el, opts);
    };
    function bind(b, el, opts) {
        var full = el == window, $el = $(el);
        if (!b && (full && !pageBlock || !full && !$el.data('blockUI.isBlocked')))
            return;
        if (!full)
            $el.data('blockUI.isBlocked', b);
        if (!opts.bindEvents || (b && !opts.showOverlay))
            return;
        var events = 'mousedown mouseup keydown keypress';
        b ? $(document).bind(events, opts, handler) : $(document).unbind(events, handler);
    };
    function handler(e) {
        if (e.keyCode && e.keyCode == 9) {
            if (pageBlock && e.data.constrainTabKey) {
                var els = pageBlockEls;
                var fwd = !e.shiftKey && e.target === els[els.length - 1];
                var back = e.shiftKey && e.target === els[0];
                if (fwd || back) {
                    setTimeout(function () {
                        focus(back)
                    }, 10);
                    return false;
                }
            }
        }
        var opts = e.data;
        if ($(e.target).parents('div.' + opts.blockMsgClass).length > 0)
            return true;
        return $(e.target).parents().children().filter('div.blockUI').length == 0;
    };
    function focus(back) {
        if (!pageBlockEls)
            return;
        var e = pageBlockEls[back === true ? pageBlockEls.length - 1 : 0];
        if (e)
            e.focus();
    };
    function center(el, x, y) {
        var p = el.parentNode, s = el.style;
        var l = ((p.offsetWidth - el.offsetWidth) / 2) - sz(p, 'borderLeftWidth');
        var t = ((p.offsetHeight - el.offsetHeight) / 2) - sz(p, 'borderTopWidth');
        if (x) s.left = l > 0 ? (l + 'px') : '0';
        if (y) s.top = t > 0 ? (t + 'px') : '0';
    };
    function sz(el, p) {
        return parseInt($.css(el, p)) || 0;
    };
})(jQuery);